<queries system="Asset">
    <!--
        Adds a new row to the asset table. Assetid comes from assetid sequence.
        Typeid must exist in the asset_type else this query will fail.
        Binds   : typeid
    -->
    <query id="addAsset">
        <primary>
            <insert>
                <fields table="asset">
                    <field>assetid</field>
                    <field>typeid</field>
                </fields>
                <values>
                    <value column="assetid">:assetid</value>
                    <value column="typeid">:typeid</value>
                </values>
            </insert>
        </primary>
    </query>

    <!--
        Deletes a single asset from the asset table.
        Binds   : assetid
    -->
    <query id="deleteAsset">
        <primary>
            <delete>
                <where>
                    <equal table="asset" column="assetid">:assetid</equal>
                </where>
            </delete>
        </primary>
    </query>

    <query id="assetExists">
        <primary>
            <select>
                <fields>
                    <field table="asset" column="assetid" />
                </fields>
                <from>
                    <table>asset</table>
                </from>
                <where>
                    <equal table="asset" column="assetid">:assetid</equal>
                </where>
            </select>
        </primary>
    </query>

    <query id="count">
        <primary>
            <select>
                <fields>
                    <function function="count">
                        <arg><field table="asset" column="assetid" /></arg>
                    </function>
                </fields>
                <from>
                    <table>asset</table>
                </from>
                <where>
                    <equal table="asset" column="typeid">:typeid</equal>
                </where>
            </select>
        </primary>
        <alternate>
            <assert-array data="typeid">
                <select>
                    <fields>
                        <field table="asset" column="typeid" />
                        <function function="count" alias="num">
                            <arg><field table="asset" column="assetid" /></arg>
                        </function>
                    </fields>
                    <from>
                        <table>asset</table>
                    </from>
                    <where>
                        <in table="asset" column="typeid">:typeid</in>
                    </where>
                    <group-by>
                        <field table="asset" column="typeid" />
                    </group-by>
                    <order-by direction="DESC">
                        <field table="" column="num" />
                    </order-by>
                </select>
            </assert-array>
        </alternate>
        <alternate>
            <assert-null data="typeid">
                <select>
                    <fields>
                        <function function="count">
                            <arg><field table="asset" column="assetid" /></arg>
                        </function>
                    </fields>
                    <from>
                        <table>asset</table>
                    </from>
                </select>
            </assert-null>
        </alternate>
    </query>

    <query id="getTypeOfAsset">
        <primary>
            <select>
                <fields>
                    <field table="asset" column="typeid" />
                </fields>
                <from>
                    <table>asset</table>
                </from>
                <where>
                    <equal table="asset" column="assetid">:assetid</equal>
                </where>
            </select>
        </primary>
        <alternate>
            <assert-array data="assetid">
                <select>
                    <fields>
                        <field table="asset" column="assetid" />
                        <field table="asset" column="typeid" />
                    </fields>
                    <from>
                        <table>asset</table>
                    </from>
                    <where>
                        <in table="asset" column="assetid">:assetid</in>
                    </where>
                </select>
            </assert-array>
        </alternate>
    </query>

    <query id="getAssetsByType">
        <primary>
            <select>
                <fields>
                    <field table="asset" column="assetid" />
                </fields>
                <from>
                    <table>asset</table>
                </from>
                <where>
                    <equal table="asset" column="typeid">:typeid</equal>
                </where>
            </select>
        </primary>
        <alternate>
            <assert-array data="typeid">
                <select>
                    <fields>
                        <field table="asset" column="assetid" />
                    </fields>
                    <from>
                        <table>asset</table>
                    </from>
                    <where>
                        <in table="asset" column="typeid">:typeid</in>
                    </where>
                </select>
            </assert-array>
        </alternate>
    </query>

    <!--
        Inserts a single asset type to asset_type table.
        Binds   : typeid, name
    -->
    <query id="addAssetType">
        <primary>
            <insert>
                <fields table="asset_type">
                    <field>typeid</field>
                    <field>name</field>
                    <field>category</field>
                    <field>system</field>
                    <field>is_custom</field>
                </fields>
                <values>
                    <value column="typeid">:typeid</value>
                    <value column="name">:name</value>
                    <value column="category">:category</value>
                    <value column="system">:system</value>
                    <value column="is_custom">:isCustom</value>
                </values>
            </insert>
        </primary>
    </query>

    <!--
        Inserts a single asset type tree row.
        Binds   : typeid, parentTypeid, lvl
    -->
    <query id="addAssetTypeTree">
        <primary>
            <insert>
                <fields table="asset_type_tree">
                    <field>typeid</field>
                    <field>parent_typeid</field>
                    <field>lvl</field>
                </fields>
                <values>
                    <value column="typeid">:typeid</value>
                    <value column="parent_typeid">:parentTypeid</value>
                    <value column="lvl">:lvl</value>
                </values>
            </insert>
        </primary>
    </query>

    <!--
        Retrieves this type code from the table.
    -->
    <query id="typeExists">
        <primary>
            <select>
                <fields>
                    <field table="asset_type" column="typeid" />
                </fields>
                <from>
                    <table>asset_type</table>
                </from>
                <where>
                    <equal table="asset_type" column="typeid">:typeid</equal>
                </where>
            </select>
        </primary>
    </query>

    <!--
        Retrieves information about the specified asset type.
        Fields: typeid, name, category
        Binds: typeid
    -->
    <query id="getAssetTypeInfo">
        <primary>
        <select>
            <fields>
                <field table="asset_type" column="typeid" />
                <field table="asset_type" column="name" />
                <field table="asset_type" column="category" />
                <field table="asset_type" column="system" />
                <field table="asset_type" column="is_custom" />
            </fields>
            <from>
                <table>asset_type</table>
            </from>
            <where>
                <equal table="asset_type" column="typeid"><value>:typeid</value></equal>
            </where>
        </select>
        </primary>
    </query>

    <!--
        Retrieves the name of an asset type.
        Fields  : name
        Binds   : typeid
    -->
    <query id="getTypeName">
        <primary>
        <select>
            <fields>
                <field table="asset_type" column="name" />
            </fields>
            <from>
                <table>asset_type</table>
            </from>
            <where>
                <equal table="asset_type" column="typeid"><value>:typeid</value></equal>
            </where>
        </select>
        </primary>
    </query>

    <!--
        Returns all ancestors of the given asset type.
        Fields  : typeid
        Binds   : typeid
    -->
    <query id="getParentTypes">
        <primary>
            <select>
                <fields>
                    <field table="asset_type_tree" column="parent_typeid">typeid</field>
                    <field table="asset_type_tree" column="lvl" />
                </fields>
                <from>
                    <table>asset_type_tree</table>
                </from>
                <where>
                    <equal table="asset_type_tree" column="typeid">:typeid</equal>
                    <greater table="asset_type_tree" column="lvl">0</greater>
                </where>
                <order-by direction="ASC">
                    <field table="asset_type_tree" column="lvl" />
                </order-by>
            </select>
        </primary>
    </query>

    <!--
        Returns all asset types that inherit directly from the given asset type.
        Fields  : typeid, name
        Binds   : typeid
    -->
    <query id="getChildTypes">
        <primary>
            <select>
                <fields>
                    <field table="asset_type" column="typeid" />
                    <field table="asset_type" column="name" />
                </fields>
                <from>
                    <table>asset_type</table>
                </from>
                <where>
                    <in table="asset_type" column="typeid">
                        <select>
                            <fields>
                                <field table="asset_type_tree" column="typeid" />
                            </fields>
                            <from>
                                <table>asset_type_tree</table>
                            </from>
                            <where>
                                <equal table="asset_type_tree" column="parent_typeid">:typeid</equal>
                                <equal table="asset_type_tree" column="lvl">:lvl</equal>
                            </where>
                        </select>
                    </in>
                </where>
            </select>
        </primary>
        <alternate>
            <assert-null data="lvl">
                <select>
                    <fields>
                        <field table="asset_type" column="typeid" />
                        <field table="asset_type" column="name" />
                    </fields>
                    <from>
                        <table>asset_type</table>
                    </from>
                    <where>
                        <in table="asset_type" column="typeid">
                            <select>
                                <fields>
                                    <field table="asset_type_tree" column="typeid" />
                                </fields>
                                <from>
                                    <table>asset_type_tree</table>
                                </from>
                                <where>
                                    <equal table="asset_type_tree" column="parent_typeid">:typeid</equal>
                                    <not-equal table="asset_type_tree" column="typeid">:typeid</not-equal>
                                </where>
                            </select>
                        </in>
                    </where>
                </select>
            </assert-null>
        </alternate>
    </query>

</queries>